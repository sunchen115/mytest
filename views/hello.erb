<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Errno::ENOENT at &#x2F;</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>Errno::ENOENT</strong> at <strong>&#x2F;
          </strong></h1>
        <h2>No such file or directory - &#x2F;Users&#x2F;csun&#x2F;RubymineProjects&#x2F;hotelsystem&#x2F;spec&#x2F;views&#x2F;index.erb</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            template.rb</code></li>
          <li><strong>location:</strong> <code>initialize
            </code></li>
          <li class="last"><strong>line:
            </strong> 91</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt&#x2F;template.rb</code> in
                <code><strong>initialize</strong></code>
            </li>

            <li class="code system">
              
              <ol start="84"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>    # in your template class if you have a better hint of the data&#x27;s
</code></li>
                
                <li class="pre-context-line"><code>    # encoding.
</code></li>
                
                <li class="pre-context-line"><code>    def default_encoding
</code></li>
                
                <li class="pre-context-line"><code>      @default_encoding
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read_template_file
</code></li>
                
              </ol>
              

              <ol start="91" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>      data = File.open(file, &#x27;rb&#x27;) { |io| io.read }</code></li>
              </ol>

              
              <ol start="92" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>      if data.respond_to?(:force_encoding)
</code></li>
                
                <li class="post-context-line"><code>        # Set it to the default external (without verifying)
</code></li>
                
                <li class="post-context-line"><code>        data.force_encoding(Encoding.default_external) if Encoding.default_external
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      data
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt&#x2F;template.rb</code> in
                <code><strong>open</strong></code>
            </li>

            <li class="code system">
              
              <ol start="84"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>    # in your template class if you have a better hint of the data&#x27;s
</code></li>
                
                <li class="pre-context-line"><code>    # encoding.
</code></li>
                
                <li class="pre-context-line"><code>    def default_encoding
</code></li>
                
                <li class="pre-context-line"><code>      @default_encoding
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read_template_file
</code></li>
                
              </ol>
              

              <ol start="91" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>      data = File.open(file, &#x27;rb&#x27;) { |io| io.read }</code></li>
              </ol>

              
              <ol start="92" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>      if data.respond_to?(:force_encoding)
</code></li>
                
                <li class="post-context-line"><code>        # Set it to the default external (without verifying)
</code></li>
                
                <li class="post-context-line"><code>        data.force_encoding(Encoding.default_external) if Encoding.default_external
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      data
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt&#x2F;template.rb</code> in
                <code><strong>read_template_file</strong></code>
            </li>

            <li class="code system">
              
              <ol start="84"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>    # in your template class if you have a better hint of the data&#x27;s
</code></li>
                
                <li class="pre-context-line"><code>    # encoding.
</code></li>
                
                <li class="pre-context-line"><code>    def default_encoding
</code></li>
                
                <li class="pre-context-line"><code>      @default_encoding
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def read_template_file
</code></li>
                
              </ol>
              

              <ol start="91" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>      data = File.open(file, &#x27;rb&#x27;) { |io| io.read }</code></li>
              </ol>

              
              <ol start="92" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>      if data.respond_to?(:force_encoding)
</code></li>
                
                <li class="post-context-line"><code>        # Set it to the default external (without verifying)
</code></li>
                
                <li class="post-context-line"><code>        data.force_encoding(Encoding.default_external) if Encoding.default_external
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      data
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt&#x2F;template.rb</code> in
                <code><strong>block in initialize</strong></code>
            </li>

            <li class="code system">
              
              <ol start="61"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>      @compiled_method = {}
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # used on 1.9 to set the encoding if it is not set elsewhere (like a magic comment)
</code></li>
                
                <li class="pre-context-line"><code>      # currently only used if template compiles to ruby
</code></li>
                
                <li class="pre-context-line"><code>      @default_encoding = @options.delete :default_encoding
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # load template data and prepare (uses binread to avoid encoding issues)
</code></li>
                
              </ol>
              

              <ol start="68" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>      @reader = block || lambda { |t| read_template_file }</code></li>
              </ol>

              
              <ol start="69" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>      @data = @reader.call(self)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if @data.respond_to?(:force_encoding)
</code></li>
                
                <li class="post-context-line"><code>        @data.force_encoding(default_encoding) if default_encoding
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if !@data.valid_encoding?
</code></li>
                
                <li class="post-context-line"><code>          raise Encoding::InvalidByteSequenceError, &quot;#{eval_file} is not valid #{@data.encoding}&quot;
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt&#x2F;template.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="62"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # used on 1.9 to set the encoding if it is not set elsewhere (like a magic comment)
</code></li>
                
                <li class="pre-context-line"><code>      # currently only used if template compiles to ruby
</code></li>
                
                <li class="pre-context-line"><code>      @default_encoding = @options.delete :default_encoding
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # load template data and prepare (uses binread to avoid encoding issues)
</code></li>
                
                <li class="pre-context-line"><code>      @reader = block || lambda { |t| read_template_file }
</code></li>
                
              </ol>
              

              <ol start="69" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>      @data = @reader.call(self)</code></li>
              </ol>

              
              <ol start="70" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if @data.respond_to?(:force_encoding)
</code></li>
                
                <li class="post-context-line"><code>        @data.force_encoding(default_encoding) if default_encoding
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if !@data.valid_encoding?
</code></li>
                
                <li class="post-context-line"><code>          raise Encoding::InvalidByteSequenceError, &quot;#{eval_file} is not valid #{@data.encoding}&quot;
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt&#x2F;template.rb</code> in
                <code><strong>initialize</strong></code>
            </li>

            <li class="code system">
              
              <ol start="62"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # used on 1.9 to set the encoding if it is not set elsewhere (like a magic comment)
</code></li>
                
                <li class="pre-context-line"><code>      # currently only used if template compiles to ruby
</code></li>
                
                <li class="pre-context-line"><code>      @default_encoding = @options.delete :default_encoding
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # load template data and prepare (uses binread to avoid encoding issues)
</code></li>
                
                <li class="pre-context-line"><code>      @reader = block || lambda { |t| read_template_file }
</code></li>
                
              </ol>
              

              <ol start="69" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>      @data = @reader.call(self)</code></li>
              </ol>

              
              <ol start="70" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if @data.respond_to?(:force_encoding)
</code></li>
                
                <li class="post-context-line"><code>        @data.force_encoding(default_encoding) if default_encoding
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if !@data.valid_encoding?
</code></li>
                
                <li class="post-context-line"><code>          raise Encoding::InvalidByteSequenceError, &quot;#{eval_file} is not valid #{@data.encoding}&quot;
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>new</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="846"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>              path ||= file # keep the initial path rather than the last one
</code></li>
                
                <li class="pre-context-line"><code>              if found = File.exist?(file)
</code></li>
                
                <li class="pre-context-line"><code>                path = file
</code></li>
                
                <li class="pre-context-line"><code>                break
</code></li>
                
                <li class="pre-context-line"><code>              end
</code></li>
                
                <li class="pre-context-line"><code>            end
</code></li>
                
                <li class="pre-context-line"><code>            throw :layout_missing if eat_errors and not found
</code></li>
                
              </ol>
              

              <ol start="853" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>            template.new(path, 1, options)</code></li>
              </ol>

              
              <ol start="854" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        when Proc, String
</code></li>
                
                <li class="post-context-line"><code>          body = data.is_a?(String) ? Proc.new { data } : data
</code></li>
                
                <li class="post-context-line"><code>          path, line = settings.caller_locations.first
</code></li>
                
                <li class="post-context-line"><code>          template.new(path, line.to_i, options, &amp;body)
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          raise ArgumentError, &quot;Sorry, don&#x27;t know how to render #{data.inspect}.&quot;
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in compile_template</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="846"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>              path ||= file # keep the initial path rather than the last one
</code></li>
                
                <li class="pre-context-line"><code>              if found = File.exist?(file)
</code></li>
                
                <li class="pre-context-line"><code>                path = file
</code></li>
                
                <li class="pre-context-line"><code>                break
</code></li>
                
                <li class="pre-context-line"><code>              end
</code></li>
                
                <li class="pre-context-line"><code>            end
</code></li>
                
                <li class="pre-context-line"><code>            throw :layout_missing if eat_errors and not found
</code></li>
                
              </ol>
              

              <ol start="853" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>            template.new(path, 1, options)</code></li>
              </ol>

              
              <ol start="854" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        when Proc, String
</code></li>
                
                <li class="post-context-line"><code>          body = data.is_a?(String) ? Proc.new { data } : data
</code></li>
                
                <li class="post-context-line"><code>          path, line = settings.caller_locations.first
</code></li>
                
                <li class="post-context-line"><code>          template.new(path, line.to_i, options, &amp;body)
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          raise ArgumentError, &quot;Sorry, don&#x27;t know how to render #{data.inspect}.&quot;
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;tilt-1.4.1&#x2F;lib&#x2F;tilt.rb</code> in
                <code><strong>fetch</strong></code>
            </li>

            <li class="code system">
              
              <ol start="120"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>  # Subsequent invocations return the already loaded template object.
</code></li>
                
                <li class="pre-context-line"><code>  class Cache
</code></li>
                
                <li class="pre-context-line"><code>    def initialize
</code></li>
                
                <li class="pre-context-line"><code>      @cache = {}
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def fetch(*key)
</code></li>
                
              </ol>
              

              <ol start="127" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>      @cache[key] ||= yield</code></li>
              </ol>

              
              <ol start="128" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def clear
</code></li>
                
                <li class="post-context-line"><code>      @cache = {}
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>compile_template</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="825"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      output.extend(ContentTyped).content_type = content_type if content_type
</code></li>
                
                <li class="pre-context-line"><code>      output
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def compile_template(engine, data, options, views)
</code></li>
                
                <li class="pre-context-line"><code>      eat_errors = options.delete :eat_errors
</code></li>
                
              </ol>
              

              <ol start="832" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>      template_cache.fetch engine, data, options, views do</code></li>
              </ol>

              
              <ol start="833" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>        template = Tilt[engine]
</code></li>
                
                <li class="post-context-line"><code>        raise &quot;Template engine not found: #{engine}&quot; if template.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        case data
</code></li>
                
                <li class="post-context-line"><code>        when Symbol
</code></li>
                
                <li class="post-context-line"><code>          body, path, line = settings.templates[data]
</code></li>
                
                <li class="post-context-line"><code>          if body
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>render</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="806"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>      options[:outvar]           ||= &#x27;@_out_buf&#x27;
</code></li>
                
                <li class="pre-context-line"><code>      options[:default_encoding] ||= settings.default_encoding
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # compile and render template
</code></li>
                
                <li class="pre-context-line"><code>      begin
</code></li>
                
                <li class="pre-context-line"><code>        layout_was      = @default_layout
</code></li>
                
                <li class="pre-context-line"><code>        @default_layout = false
</code></li>
                
              </ol>
              

              <ol start="813" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>        template        = compile_template(engine, data, options, views)</code></li>
              </ol>

              
              <ol start="814" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>        output          = template.render(scope, locals, &amp;block)
</code></li>
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        @default_layout = layout_was
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # render layout
</code></li>
                
                <li class="post-context-line"><code>      if layout
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>erb</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="658"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>    def initialize
</code></li>
                
                <li class="pre-context-line"><code>      super
</code></li>
                
                <li class="pre-context-line"><code>      @default_layout = :layout
</code></li>
                
                <li class="pre-context-line"><code>      @preferred_extension = nil
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def erb(template, options = {}, locals = {}, &amp;block)
</code></li>
                
              </ol>
              

              <ol start="665" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>      render(:erb, template, options, locals, &amp;block)</code></li>
              </ol>

              
              <ol start="666" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def erubis(template, options = {}, locals = {})
</code></li>
                
                <li class="post-context-line"><code>      warn &quot;Sinatra::Templates#erubis is deprecated and will be removed, use #erb instead.\n&quot; \
</code></li>
                
                <li class="post-context-line"><code>        &quot;If you have Erubis installed, it will be used automatically.&quot;
</code></li>
                
                <li class="post-context-line"><code>      render :erubis, template, options, locals
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;csun&#x2F;RubymineProjects&#x2F;hotelsystem&#x2F;web.rb</code> in
                <code><strong>block in &lt;top (required)&gt;</strong></code>
            </li>

            <li class="code app">
              
              <ol start="9"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>get &#x27;&#x2F;hello&#x27; do
</code></li>
                
                <li class="pre-context-line"><code>    &#x27;hello world&#x27;
</code></li>
                
                <li class="pre-context-line"><code>end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>get &#x27;&#x2F;&#x27; do
</code></li>
                
                <li class="pre-context-line"><code>   @default_v = &#x27;Regular: 20Mar2009(fri), 21Mar2009(sat), 22Mar2009(sun)&#x27;
</code></li>
                
              </ol>
              

              <ol start="16" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>   erb :index</code></li>
              </ol>

              
              <ol start="17" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1596"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
                <li class="pre-context-line"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :
</code></li>
                
              </ol>
              

              <ol start="1603" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>          proc { |a,p| unbound_method.bind(a).call }</code></li>
              </ol>

              
              <ol start="1604" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in compile!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1596"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
                <li class="pre-context-line"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :
</code></li>
                
              </ol>
              

              <ol start="1603" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>          proc { |a,p| unbound_method.bind(a).call }</code></li>
              </ol>

              
              <ol start="1604" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>[]</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="959"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="966" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="967" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (3 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="959"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="966" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="967" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="978"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval
</code></li>
                
              </ol>
              

              <ol start="985" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>      throw :halt, yield</code></li>
              </ol>

              
              <ol start="986" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (2 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="959"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="966" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="967" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="999"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
              </ol>
              

              <ol start="1006" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>        block ? block[self, values] : yield(self, values)</code></li>
              </ol>

              
              <ol start="1007" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
                <li class="post-context-line"><code>    # implementation is to forward the request downstream when running
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="997"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="1004" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="1005" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="997"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="1004" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="1005" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="957"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
              </ol>
              

              <ol start="964" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|</code></li>
              </ol>

              
              <ol start="965" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="956"
                  class="pre-context" id="pre-24"
                  onclick="toggle(24);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="963" class="context" id="24"
                  onclick="toggle(24);">
                <li class="context-line" id="context-24"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="964" class="post-context"
                  id="post-24" onclick="toggle(24);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="956"
                  class="pre-context" id="pre-25"
                  onclick="toggle(25);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="963" class="context" id="25"
                  onclick="toggle(25);">
                <li class="context-line" id="context-25"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="964" class="post-context"
                  id="post-25" onclick="toggle(25);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1069"
                  class="pre-context" id="pre-26"
                  onclick="toggle(26);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      invoke do
</code></li>
                
                <li class="pre-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>        filter! :before
</code></li>
                
              </ol>
              

              <ol start="1076" class="context" id="26"
                  onclick="toggle(26);">
                <li class="context-line" id="context-26"><code>        route!</code></li>
              </ol>

              
              <ol start="1077" class="post-context"
                  id="post-26" onclick="toggle(26);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      begin
</code></li>
                
                <li class="post-context-line"><code>        filter! :after unless env[&#x27;sinatra.static_file&#x27;]
</code></li>
                
                <li class="post-context-line"><code>      rescue ::Exception =&gt; boom
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1051"
                  class="pre-context" id="pre-27"
                  onclick="toggle(27);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1058" class="context" id="27"
                  onclick="toggle(27);">
                <li class="context-line" id="context-27"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1059" class="post-context"
                  id="post-27" onclick="toggle(27);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1051"
                  class="pre-context" id="pre-28"
                  onclick="toggle(28);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1058" class="context" id="28"
                  onclick="toggle(28);">
                <li class="context-line" id="context-28"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1059" class="post-context"
                  id="post-28" onclick="toggle(28);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1051"
                  class="pre-context" id="pre-29"
                  onclick="toggle(29);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1058" class="context" id="29"
                  onclick="toggle(29);">
                <li class="context-line" id="context-29"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1059" class="post-context"
                  id="post-29" onclick="toggle(29);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1066"
                  class="pre-context" id="pre-30"
                  onclick="toggle(30);">
                
                <li class="pre-context-line"><code>        body res
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>      nil # avoid double setting the same response tuple twice
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
              </ol>
              

              <ol start="1073" class="context" id="30"
                  onclick="toggle(30);">
                <li class="context-line" id="context-30"><code>      invoke do</code></li>
              </ol>

              
              <ol start="1074" class="post-context"
                  id="post-30" onclick="toggle(30);">
                
                <li class="post-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="post-context-line"><code>        filter! :before
</code></li>
                
                <li class="post-context-line"><code>        route!
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="891"
                  class="pre-context" id="pre-31"
                  onclick="toggle(31);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="898" class="context" id="31"
                  onclick="toggle(31);">
                <li class="context-line" id="context-31"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="899" class="post-context"
                  id="post-31" onclick="toggle(31);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1051"
                  class="pre-context" id="pre-32"
                  onclick="toggle(32);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1058" class="context" id="32"
                  onclick="toggle(32);">
                <li class="context-line" id="context-32"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1059" class="post-context"
                  id="post-32" onclick="toggle(32);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1051"
                  class="pre-context" id="pre-33"
                  onclick="toggle(33);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1058" class="context" id="33"
                  onclick="toggle(33);">
                <li class="context-line" id="context-33"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1059" class="post-context"
                  id="post-33" onclick="toggle(33);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1051"
                  class="pre-context" id="pre-34"
                  onclick="toggle(34);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1058" class="context" id="34"
                  onclick="toggle(34);">
                <li class="context-line" id="context-34"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1059" class="post-context"
                  id="post-34" onclick="toggle(34);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="891"
                  class="pre-context" id="pre-35"
                  onclick="toggle(35);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="898" class="context" id="35"
                  onclick="toggle(35);">
                <li class="context-line" id="context-35"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="899" class="post-context"
                  id="post-35" onclick="toggle(35);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="879"
                  class="pre-context" id="pre-36"
                  onclick="toggle(36);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="886" class="context" id="36"
                  onclick="toggle(36);">
                <li class="context-line" id="context-36"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="887" class="post-context"
                  id="post-36" onclick="toggle(36);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env) # :nodoc:
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="post-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;xss_header.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-37"
                  onclick="toggle(37);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Options:
</code></li>
                
                <li class="pre-context-line"><code>    # xss_mode:: How the browser should prevent the attack (default: :block)
</code></li>
                
                <li class="pre-context-line"><code>    class XSSHeader &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      default_options :xss_mode =&gt; :block, :nosniff =&gt; true
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="37"
                  onclick="toggle(37);">
                <li class="context-line" id="context-37"><code>        status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-37" onclick="toggle(37);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-XSS-Protection&#x27;]       ||= &quot;1; mode=#{options[:xss_mode]}&quot; if html? headers
</code></li>
                
                <li class="post-context-line"><code>        headers[&#x27;X-Content-Type-Options&#x27;] ||= &#x27;nosniff&#x27;                       if options[:nosniff]
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;path_traversal.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="9"
                  class="pre-context" id="pre-38"
                  onclick="toggle(38);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Unescapes &#x27;&#x2F;&#x27; and &#x27;.&#x27;, expands +path_info+.
</code></li>
                
                <li class="pre-context-line"><code>    # Thus &lt;tt&gt;GET &#x2F;foo&#x2F;%2e%2e%2fbar&lt;&#x2F;tt&gt; becomes &lt;tt&gt;GET &#x2F;bar&lt;&#x2F;tt&gt;.
</code></li>
                
                <li class="pre-context-line"><code>    class PathTraversal &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        path_was         = env[&quot;PATH_INFO&quot;]
</code></li>
                
                <li class="pre-context-line"><code>        env[&quot;PATH_INFO&quot;] = cleanup path_was if path_was &amp;&amp; !path_was.empty?
</code></li>
                
              </ol>
              

              <ol start="16" class="context" id="38"
                  onclick="toggle(38);">
                <li class="context-line" id="context-38"><code>        app.call env</code></li>
              </ol>

              
              <ol start="17" class="post-context"
                  id="post-38" onclick="toggle(38);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        env[&quot;PATH_INFO&quot;] = path_was
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def cleanup(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to?(:encoding)
</code></li>
                
                <li class="post-context-line"><code>          # Ruby 1.9+ M17N
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;json_csrf.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-39"
                  onclick="toggle(39);">
                
                <li class="pre-context-line"><code>    # Array prototype has been patched to track data. Checks the referrer
</code></li>
                
                <li class="pre-context-line"><code>    # even on GET requests if the content type is JSON.
</code></li>
                
                <li class="pre-context-line"><code>    class JsonCsrf &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      alias react deny
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        request               = Request.new(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="39"
                  onclick="toggle(39);">
                <li class="context-line" id="context-39"><code>        status, headers, body = app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-39" onclick="toggle(39);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if has_vector? request, headers
</code></li>
                
                <li class="post-context-line"><code>          warn env, &quot;attack prevented by #{self.class}&quot;
</code></li>
                
                <li class="post-context-line"><code>          react(env) or [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="42"
                  class="pre-context" id="pre-40"
                  onclick="toggle(40);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="49" class="context" id="40"
                  onclick="toggle(40);">
                <li class="context-line" id="context-40"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="50" class="post-context"
                  id="post-40" onclick="toggle(40);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="42"
                  class="pre-context" id="pre-41"
                  onclick="toggle(41);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="49" class="context" id="41"
                  onclick="toggle(41);">
                <li class="context-line" id="context-41"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="50" class="post-context"
                  id="post-41" onclick="toggle(41);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-protection-1.5.3&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;frame_options.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="24"
                  class="pre-context" id="pre-42"
                  onclick="toggle(42);">
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options]
</code></li>
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options].to_s.upcase unless frame_options.respond_to? :to_str
</code></li>
                
                <li class="pre-context-line"><code>          frame_options.to_str
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="31" class="context" id="42"
                  onclick="toggle(42);">
                <li class="context-line" id="context-42"><code>        status, headers, body        = @app.call(env)</code></li>
              </ol>

              
              <ol start="32" class="post-context"
                  id="post-42" onclick="toggle(42);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-Frame-Options&#x27;] ||= frame_options if html? headers
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;logger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="8"
                  class="pre-context" id="pre-43"
                  onclick="toggle(43);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      logger = ::Logger.new(env[&#x27;rack.errors&#x27;])
</code></li>
                
                <li class="pre-context-line"><code>      logger.level = @level
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      env[&#x27;rack.logger&#x27;] = logger
</code></li>
                
              </ol>
              

              <ol start="15" class="context" id="43"
                  onclick="toggle(43);">
                <li class="context-line" id="context-43"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="16" class="post-context"
                  id="post-43" onclick="toggle(43);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;commonlogger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="26"
                  class="pre-context" id="pre-44"
                  onclick="toggle(44);">
                
                <li class="pre-context-line"><code>    def initialize(app, logger=nil)
</code></li>
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @logger = logger
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      began_at = Time.now
</code></li>
                
              </ol>
              

              <ol start="33" class="context" id="44"
                  onclick="toggle(44);">
                <li class="context-line" id="context-44"><code>      status, header, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="34" class="post-context"
                  id="post-44" onclick="toggle(44);">
                
                <li class="post-context-line"><code>      header = Utils::HeaderHash.new(header)
</code></li>
                
                <li class="post-context-line"><code>      body = BodyProxy.new(body) { log(env, status, header, began_at) }
</code></li>
                
                <li class="post-context-line"><code>      [status, header, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="210"
                  class="pre-context" id="pre-45"
                  onclick="toggle(45);">
                
                <li class="pre-context-line"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="pre-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
              </ol>
              

              <ol start="217" class="context" id="45"
                  onclick="toggle(45);">
                <li class="context-line" id="context-45"><code>        call_without_check(env)</code></li>
              </ol>

              
              <ol start="218" class="post-context"
                  id="post-45" onclick="toggle(45);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  class NotFound &lt; NameError #:nodoc:
</code></li>
                
                <li class="post-context-line"><code>    def http_status; 404 end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="203"
                  class="pre-context" id="pre-46"
                  onclick="toggle(46);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  # Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing,
</code></li>
                
                <li class="pre-context-line"><code>  # if another CommonLogger is already in the middleware chain.
</code></li>
                
                <li class="pre-context-line"><code>  class CommonLogger &lt; Rack::CommonLogger
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="210" class="context" id="46"
                  onclick="toggle(46);">
                <li class="context-line" id="context-46"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super</code></li>
              </ol>

              
              <ol start="211" class="post-context"
                  id="post-46" onclick="toggle(46);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="post-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="post-context-line"><code>      def call(env)
</code></li>
                
                <li class="post-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
                <li class="post-context-line"><code>        call_without_check(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;head.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="4"
                  class="pre-context" id="pre-47"
                  onclick="toggle(47);">
                
                <li class="pre-context-line"><code>  # Rack::Head returns an empty body for all HEAD requests. It leaves
</code></li>
                
                <li class="pre-context-line"><code>  # all other requests unchanged.
</code></li>
                
                <li class="pre-context-line"><code>  def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>    @app = app
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  def call(env)
</code></li>
                
              </ol>
              

              <ol start="11" class="context" id="47"
                  onclick="toggle(47);">
                <li class="context-line" id="context-47"><code>    status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="12" class="post-context"
                  id="post-47" onclick="toggle(47);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    if env[&quot;REQUEST_METHOD&quot;] == &quot;HEAD&quot;
</code></li>
                
                <li class="post-context-line"><code>      body.close if body.respond_to? :close
</code></li>
                
                <li class="post-context-line"><code>      [status, headers, []]
</code></li>
                
                <li class="post-context-line"><code>    else
</code></li>
                
                <li class="post-context-line"><code>      [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;methodoverride.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="14"
                  class="pre-context" id="pre-48"
                  onclick="toggle(48);">
                
                <li class="pre-context-line"><code>        method = method_override(env)
</code></li>
                
                <li class="pre-context-line"><code>        if HTTP_METHODS.include?(method)
</code></li>
                
                <li class="pre-context-line"><code>          env[&quot;rack.methodoverride.original_method&quot;] = env[&quot;REQUEST_METHOD&quot;]
</code></li>
                
                <li class="pre-context-line"><code>          env[&quot;REQUEST_METHOD&quot;] = method
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="21" class="context" id="48"
                  onclick="toggle(48);">
                <li class="context-line" id="context-48"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="22" class="post-context"
                  id="post-48" onclick="toggle(48);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def method_override(env)
</code></li>
                
                <li class="post-context-line"><code>      req = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      method = req.POST[METHOD_OVERRIDE_PARAM_KEY] ||
</code></li>
                
                <li class="post-context-line"><code>        env[HTTP_METHOD_OVERRIDE_HEADER]
</code></li>
                
                <li class="post-context-line"><code>      method.to_s.upcase
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;show_exceptions.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="14"
                  class="pre-context" id="pre-49"
                  onclick="toggle(49);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app      = app
</code></li>
                
                <li class="pre-context-line"><code>      @template = ERB.new(TEMPLATE)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="21" class="context" id="49"
                  onclick="toggle(49);">
                <li class="context-line" id="context-49"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="22" class="post-context"
                  id="post-49" onclick="toggle(49);">
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      errors, env[&quot;rack.errors&quot;] = env[&quot;rack.errors&quot;], @@eats_errors
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if prefers_plain_text?(env)
</code></li>
                
                <li class="post-context-line"><code>        content_type = &quot;text&#x2F;plain&quot;
</code></li>
                
                <li class="post-context-line"><code>        body = [dump_exception(e)]
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="173"
                  class="pre-context" id="pre-50"
                  onclick="toggle(50);">
                
                <li class="pre-context-line"><code>  # Some Rack handlers (Thin, Rainbows!) implement an extended body object protocol, however,
</code></li>
                
                <li class="pre-context-line"><code>  # some middleware (namely Rack::Lint) will break it by not mirroring the methods in question.
</code></li>
                
                <li class="pre-context-line"><code>  # This middleware will detect an extended body object and will make sure it reaches the
</code></li>
                
                <li class="pre-context-line"><code>  # handler directly. We do this here, so our middleware and middleware set up by the app will
</code></li>
                
                <li class="pre-context-line"><code>  # still be able to run.
</code></li>
                
                <li class="pre-context-line"><code>  class ExtendedRack &lt; Struct.new(:app)
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="180" class="context" id="50"
                  onclick="toggle(50);">
                <li class="context-line" id="context-50"><code>      result, callback = app.call(env), env[&#x27;async.callback&#x27;]</code></li>
              </ol>

              
              <ol start="181" class="post-context"
                  id="post-50" onclick="toggle(50);">
                
                <li class="post-context-line"><code>      return result unless callback and async?(*result)
</code></li>
                
                <li class="post-context-line"><code>      after_response { callback.call result }
</code></li>
                
                <li class="post-context-line"><code>      setup_close(env, *result)
</code></li>
                
                <li class="post-context-line"><code>      throw :async
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="2007"
                  class="pre-context" id="pre-51"
                  onclick="toggle(51);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def helpers
</code></li>
                
                <li class="pre-context-line"><code>      @instance
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="2014" class="context" id="51"
                  onclick="toggle(51);">
                <li class="context-line" id="context-51"><code>      @stack.call(env)</code></li>
              </ol>

              
              <ol start="2015" class="post-context"
                  id="post-51" onclick="toggle(51);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def inspect
</code></li>
                
                <li class="post-context-line"><code>      &quot;#&lt;#{@instance.class} app_file=#{settings.app_file.inspect}&gt;&quot;
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1471"
                  class="pre-context" id="pre-52"
                  onclick="toggle(52);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1478" class="context" id="52"
                  onclick="toggle(52);">
                <li class="context-line" id="context-52"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1479" class="post-context"
                  id="post-52" onclick="toggle(52);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1781"
                  class="pre-context" id="pre-53"
                  onclick="toggle(53);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @@mutex = Mutex.new
</code></li>
                
                <li class="pre-context-line"><code>      def synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if lock?
</code></li>
                
                <li class="pre-context-line"><code>          @@mutex.synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="1788" class="context" id="53"
                  onclick="toggle(53);">
                <li class="context-line" id="context-53"><code>          yield</code></li>
              </ol>

              
              <ol start="1789" class="post-context"
                  id="post-53" onclick="toggle(53);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # used for deprecation warnings
</code></li>
                
                <li class="post-context-line"><code>      def warn(message)
</code></li>
                
                <li class="post-context-line"><code>        super message + &quot;\n\tfrom #{cleaned_caller.first.join(&#x27;:&#x27;)}&quot;
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;sinatra-1.4.5&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1471"
                  class="pre-context" id="pre-54"
                  onclick="toggle(54);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1478" class="context" id="54"
                  onclick="toggle(54);">
                <li class="context-line" id="context-54"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1479" class="post-context"
                  id="post-54" onclick="toggle(54);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;mock.rb</code> in
                <code><strong>request</strong></code>
            </li>

            <li class="code system">
              
              <ol start="66"
                  class="pre-context" id="pre-55"
                  onclick="toggle(55);">
                
                <li class="pre-context-line"><code>      if opts[:lint]
</code></li>
                
                <li class="pre-context-line"><code>        app = Rack::Lint.new(@app)
</code></li>
                
                <li class="pre-context-line"><code>      else
</code></li>
                
                <li class="pre-context-line"><code>        app = @app
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      errors = env[&quot;rack.errors&quot;]
</code></li>
                
              </ol>
              

              <ol start="73" class="context" id="55"
                  onclick="toggle(55);">
                <li class="context-line" id="context-55"><code>      status, headers, body  = app.call(env)</code></li>
              </ol>

              
              <ol start="74" class="post-context"
                  id="post-55" onclick="toggle(55);">
                
                <li class="post-context-line"><code>      MockResponse.new(status, headers, body, errors)
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      body.close if body.respond_to?(:close)
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Return the Rack environment used for a request to +uri+.
</code></li>
                
                <li class="post-context-line"><code>    def self.env_for(uri=&quot;&quot;, opts={})
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;mock.rb</code> in
                <code><strong>get</strong></code>
            </li>

            <li class="code system">
              
              <ol start="49"
                  class="pre-context" id="pre-56"
                  onclick="toggle(56);">
                
                <li class="pre-context-line"><code>      &quot;rack.run_once&quot; =&gt; false,
</code></li>
                
                <li class="pre-context-line"><code>    }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="56" class="context" id="56"
                  onclick="toggle(56);">
                <li class="context-line" id="context-56"><code>    def get(uri, opts={})    request(&quot;GET&quot;, uri, opts)    end</code></li>
              </ol>

              
              <ol start="57" class="post-context"
                  id="post-56" onclick="toggle(56);">
                
                <li class="post-context-line"><code>    def post(uri, opts={})   request(&quot;POST&quot;, uri, opts)   end
</code></li>
                
                <li class="post-context-line"><code>    def put(uri, opts={})    request(&quot;PUT&quot;, uri, opts)    end
</code></li>
                
                <li class="post-context-line"><code>    def patch(uri, opts={})  request(&quot;PATCH&quot;, uri, opts)    end
</code></li>
                
                <li class="post-context-line"><code>    def delete(uri, opts={}) request(&quot;DELETE&quot;, uri, opts) end
</code></li>
                
                <li class="post-context-line"><code>    def head(uri, opts={})   request(&quot;HEAD&quot;, uri, opts)   end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def request(method=&quot;GET&quot;, uri=&quot;&quot;, opts={})
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;csun&#x2F;RubymineProjects&#x2F;hotelsystem&#x2F;spec&#x2F;page_spec.rb</code> in
                <code><strong>block (2 levels) in &lt;top (required)&gt;</strong></code>
            </li>

            <li class="code app">
              
              <ol start="7"
                  class="pre-context" id="pre-57"
                  onclick="toggle(57);">
                
                <li class="pre-context-line"><code>    @req = Rack::MockRequest.new(Sinatra::Application)
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  it &#x27;should show index correctly&#x27; do
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="14" class="context" id="57"
                  onclick="toggle(57);">
                <li class="context-line" id="context-57"><code>    reps = @req.get &#x27;&#x2F;&#x27;</code></li>
              </ol>

              
              <ol start="15" class="post-context"
                  id="post-57" onclick="toggle(57);">
                
                <li class="post-context-line"><code>    #reps.status.should == 200
</code></li>
                
                <li class="post-context-line"><code>    puts reps.body
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  it &#x27;shold return the cheapest hotel name for post data&#x27; do
</code></li>
                
                <li class="post-context-line"><code>    reps = @req.post(&#x27;&#x2F;posts&#x27;,opts = {:input=&gt;&quot;query=Regular: 20Mar2009(fri), 21Mar2009(sat), 22Mar2009(sun)&quot;})
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example.rb</code> in
                <code><strong>instance_exec</strong></code>
            </li>

            <li class="code system">
              
              <ol start="141"
                  class="pre-context" id="pre-58"
                  onclick="toggle(58);">
                
                <li class="pre-context-line"><code>        begin
</code></li>
                
                <li class="pre-context-line"><code>          if skipped?
</code></li>
                
                <li class="pre-context-line"><code>            Pending.mark_pending! self, skip
</code></li>
                
                <li class="pre-context-line"><code>          elsif !RSpec.configuration.dry_run?
</code></li>
                
                <li class="pre-context-line"><code>            with_around_example_hooks do
</code></li>
                
                <li class="pre-context-line"><code>              begin
</code></li>
                
                <li class="pre-context-line"><code>                run_before_example
</code></li>
                
              </ol>
              

              <ol start="148" class="context" id="58"
                  onclick="toggle(58);">
                <li class="context-line" id="context-58"><code>                @example_group_instance.instance_exec(self, &amp;@example_block)</code></li>
              </ol>

              
              <ol start="149" class="post-context"
                  id="post-58" onclick="toggle(58);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>                if pending?
</code></li>
                
                <li class="post-context-line"><code>                  Pending.mark_fixed! self
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>                  raise Pending::PendingExampleFixedError,
</code></li>
                
                <li class="post-context-line"><code>                    &#x27;Expected example to fail since it is pending, but it passed.&#x27;,
</code></li>
                
                <li class="post-context-line"><code>                    [location]
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example.rb</code> in
                <code><strong>block in run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="141"
                  class="pre-context" id="pre-59"
                  onclick="toggle(59);">
                
                <li class="pre-context-line"><code>        begin
</code></li>
                
                <li class="pre-context-line"><code>          if skipped?
</code></li>
                
                <li class="pre-context-line"><code>            Pending.mark_pending! self, skip
</code></li>
                
                <li class="pre-context-line"><code>          elsif !RSpec.configuration.dry_run?
</code></li>
                
                <li class="pre-context-line"><code>            with_around_example_hooks do
</code></li>
                
                <li class="pre-context-line"><code>              begin
</code></li>
                
                <li class="pre-context-line"><code>                run_before_example
</code></li>
                
              </ol>
              

              <ol start="148" class="context" id="59"
                  onclick="toggle(59);">
                <li class="context-line" id="context-59"><code>                @example_group_instance.instance_exec(self, &amp;@example_block)</code></li>
              </ol>

              
              <ol start="149" class="post-context"
                  id="post-59" onclick="toggle(59);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>                if pending?
</code></li>
                
                <li class="post-context-line"><code>                  Pending.mark_fixed! self
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>                  raise Pending::PendingExampleFixedError,
</code></li>
                
                <li class="post-context-line"><code>                    &#x27;Expected example to fail since it is pending, but it passed.&#x27;,
</code></li>
                
                <li class="post-context-line"><code>                    [location]
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example.rb</code> in
                <code><strong>with_around_example_hooks</strong></code>
            </li>

            <li class="code system">
              
              <ol start="294"
                  class="pre-context" id="pre-60"
                  onclick="toggle(60);">
                
                <li class="pre-context-line"><code>        @example_group_instance.instance_exec(*args, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    private
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def with_around_example_hooks(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if around_example_hooks.empty?
</code></li>
                
              </ol>
              

              <ol start="301" class="context" id="60"
                  onclick="toggle(60);">
                <li class="context-line" id="context-60"><code>          yield</code></li>
              </ol>

              
              <ol start="302" class="post-context"
                  id="post-60" onclick="toggle(60);">
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          @example_group_class.hooks.run(:around, :example, self, Procsy.new(self, &amp;block))
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>        set_exception(e, &quot;in an `around(:example)` hook&quot;)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example.rb</code> in
                <code><strong>run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="138"
                  class="pre-context" id="pre-61"
                  onclick="toggle(61);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        start(reporter)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        begin
</code></li>
                
                <li class="pre-context-line"><code>          if skipped?
</code></li>
                
                <li class="pre-context-line"><code>            Pending.mark_pending! self, skip
</code></li>
                
                <li class="pre-context-line"><code>          elsif !RSpec.configuration.dry_run?
</code></li>
                
              </ol>
              

              <ol start="145" class="context" id="61"
                  onclick="toggle(61);">
                <li class="context-line" id="context-61"><code>            with_around_example_hooks do</code></li>
              </ol>

              
              <ol start="146" class="post-context"
                  id="post-61" onclick="toggle(61);">
                
                <li class="post-context-line"><code>              begin
</code></li>
                
                <li class="post-context-line"><code>                run_before_example
</code></li>
                
                <li class="post-context-line"><code>                @example_group_instance.instance_exec(self, &amp;@example_block)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>                if pending?
</code></li>
                
                <li class="post-context-line"><code>                  Pending.mark_fixed! self
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example_group.rb</code> in
                <code><strong>block in run_examples</strong></code>
            </li>

            <li class="code system">
              
              <ol start="487"
                  class="pre-context" id="pre-62"
                  onclick="toggle(62);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # @private
</code></li>
                
                <li class="pre-context-line"><code>      def self.run_examples(reporter)
</code></li>
                
                <li class="pre-context-line"><code>        ordering_strategy.order(filtered_examples).map do |example|
</code></li>
                
                <li class="pre-context-line"><code>          next if RSpec.world.wants_to_quit
</code></li>
                
                <li class="pre-context-line"><code>          instance = new
</code></li>
                
                <li class="pre-context-line"><code>          set_ivars(instance, before_context_ivars)
</code></li>
                
              </ol>
              

              <ol start="494" class="context" id="62"
                  onclick="toggle(62);">
                <li class="context-line" id="context-62"><code>          succeeded = example.run(instance, reporter)</code></li>
              </ol>

              
              <ol start="495" class="post-context"
                  id="post-62" onclick="toggle(62);">
                
                <li class="post-context-line"><code>          RSpec.world.wants_to_quit = true if fail_fast? &amp;&amp; !succeeded
</code></li>
                
                <li class="post-context-line"><code>          succeeded
</code></li>
                
                <li class="post-context-line"><code>        end.all?
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # @private
</code></li>
                
                <li class="post-context-line"><code>      def self.for_filtered_examples(reporter, &amp;block)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example_group.rb</code> in
                <code><strong>map</strong></code>
            </li>

            <li class="code system">
              
              <ol start="483"
                  class="pre-context" id="pre-63"
                  onclick="toggle(63);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>          registry.fetch(:global)
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # @private
</code></li>
                
                <li class="pre-context-line"><code>      def self.run_examples(reporter)
</code></li>
                
              </ol>
              

              <ol start="490" class="context" id="63"
                  onclick="toggle(63);">
                <li class="context-line" id="context-63"><code>        ordering_strategy.order(filtered_examples).map do |example|</code></li>
              </ol>

              
              <ol start="491" class="post-context"
                  id="post-63" onclick="toggle(63);">
                
                <li class="post-context-line"><code>          next if RSpec.world.wants_to_quit
</code></li>
                
                <li class="post-context-line"><code>          instance = new
</code></li>
                
                <li class="post-context-line"><code>          set_ivars(instance, before_context_ivars)
</code></li>
                
                <li class="post-context-line"><code>          succeeded = example.run(instance, reporter)
</code></li>
                
                <li class="post-context-line"><code>          RSpec.world.wants_to_quit = true if fail_fast? &amp;&amp; !succeeded
</code></li>
                
                <li class="post-context-line"><code>          succeeded
</code></li>
                
                <li class="post-context-line"><code>        end.all?
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example_group.rb</code> in
                <code><strong>run_examples</strong></code>
            </li>

            <li class="code system">
              
              <ol start="483"
                  class="pre-context" id="pre-64"
                  onclick="toggle(64);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>          registry.fetch(:global)
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # @private
</code></li>
                
                <li class="pre-context-line"><code>      def self.run_examples(reporter)
</code></li>
                
              </ol>
              

              <ol start="490" class="context" id="64"
                  onclick="toggle(64);">
                <li class="context-line" id="context-64"><code>        ordering_strategy.order(filtered_examples).map do |example|</code></li>
              </ol>

              
              <ol start="491" class="post-context"
                  id="post-64" onclick="toggle(64);">
                
                <li class="post-context-line"><code>          next if RSpec.world.wants_to_quit
</code></li>
                
                <li class="post-context-line"><code>          instance = new
</code></li>
                
                <li class="post-context-line"><code>          set_ivars(instance, before_context_ivars)
</code></li>
                
                <li class="post-context-line"><code>          succeeded = example.run(instance, reporter)
</code></li>
                
                <li class="post-context-line"><code>          RSpec.world.wants_to_quit = true if fail_fast? &amp;&amp; !succeeded
</code></li>
                
                <li class="post-context-line"><code>          succeeded
</code></li>
                
                <li class="post-context-line"><code>        end.all?
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;example_group.rb</code> in
                <code><strong>run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="450"
                  class="pre-context" id="pre-65"
                  onclick="toggle(65);">
                
                <li class="pre-context-line"><code>          RSpec.world.clear_remaining_example_groups if top_level?
</code></li>
                
                <li class="pre-context-line"><code>          return
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>        reporter.example_group_started(self)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        begin
</code></li>
                
                <li class="pre-context-line"><code>          run_before_context_hooks(new)
</code></li>
                
              </ol>
              

              <ol start="457" class="context" id="65"
                  onclick="toggle(65);">
                <li class="context-line" id="context-65"><code>          result_for_this_group = run_examples(reporter)</code></li>
              </ol>

              
              <ol start="458" class="post-context"
                  id="post-65" onclick="toggle(65);">
                
                <li class="post-context-line"><code>          results_for_descendants = ordering_strategy.order(children).map { |child| child.run(reporter) }.all?
</code></li>
                
                <li class="post-context-line"><code>          result_for_this_group &amp;&amp; results_for_descendants
</code></li>
                
                <li class="post-context-line"><code>        rescue Pending::SkipDeclaredInExample =&gt; ex
</code></li>
                
                <li class="post-context-line"><code>          for_filtered_examples(reporter) {|example| example.skip_with_exception(reporter, ex) }
</code></li>
                
                <li class="post-context-line"><code>        rescue Exception =&gt; ex
</code></li>
                
                <li class="post-context-line"><code>          RSpec.world.wants_to_quit = true if fail_fast?
</code></li>
                
                <li class="post-context-line"><code>          for_filtered_examples(reporter) {|example| example.fail_with_exception(reporter, ex) }
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>block (2 levels) in run_specs</strong></code>
            </li>

            <li class="code system">
              
              <ol start="105"
                  class="pre-context" id="pre-66"
                  onclick="toggle(66);">
                
                <li class="pre-context-line"><code>      #   or the configured failure exit code (1 by default) if specs
</code></li>
                
                <li class="pre-context-line"><code>      #   failed.
</code></li>
                
                <li class="pre-context-line"><code>      def run_specs(example_groups)
</code></li>
                
                <li class="pre-context-line"><code>        @configuration.reporter.report(@world.example_count(example_groups)) do |reporter|
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            hook_context = SuiteHookContext.new
</code></li>
                
                <li class="pre-context-line"><code>            @configuration.hooks.run(:before, :suite, hook_context)
</code></li>
                
              </ol>
              

              <ol start="112" class="context" id="66"
                  onclick="toggle(66);">
                <li class="context-line" id="context-66"><code>            example_groups.map { |g| g.run(reporter) }.all? ? 0 : @configuration.failure_exit_code</code></li>
              </ol>

              
              <ol start="113" class="post-context"
                  id="post-66" onclick="toggle(66);">
                
                <li class="post-context-line"><code>          ensure
</code></li>
                
                <li class="post-context-line"><code>            @configuration.hooks.run(:after, :suite, hook_context)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # @private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>map</strong></code>
            </li>

            <li class="code system">
              
              <ol start="105"
                  class="pre-context" id="pre-67"
                  onclick="toggle(67);">
                
                <li class="pre-context-line"><code>      #   or the configured failure exit code (1 by default) if specs
</code></li>
                
                <li class="pre-context-line"><code>      #   failed.
</code></li>
                
                <li class="pre-context-line"><code>      def run_specs(example_groups)
</code></li>
                
                <li class="pre-context-line"><code>        @configuration.reporter.report(@world.example_count(example_groups)) do |reporter|
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            hook_context = SuiteHookContext.new
</code></li>
                
                <li class="pre-context-line"><code>            @configuration.hooks.run(:before, :suite, hook_context)
</code></li>
                
              </ol>
              

              <ol start="112" class="context" id="67"
                  onclick="toggle(67);">
                <li class="context-line" id="context-67"><code>            example_groups.map { |g| g.run(reporter) }.all? ? 0 : @configuration.failure_exit_code</code></li>
              </ol>

              
              <ol start="113" class="post-context"
                  id="post-67" onclick="toggle(67);">
                
                <li class="post-context-line"><code>          ensure
</code></li>
                
                <li class="post-context-line"><code>            @configuration.hooks.run(:after, :suite, hook_context)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # @private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>block in run_specs</strong></code>
            </li>

            <li class="code system">
              
              <ol start="105"
                  class="pre-context" id="pre-68"
                  onclick="toggle(68);">
                
                <li class="pre-context-line"><code>      #   or the configured failure exit code (1 by default) if specs
</code></li>
                
                <li class="pre-context-line"><code>      #   failed.
</code></li>
                
                <li class="pre-context-line"><code>      def run_specs(example_groups)
</code></li>
                
                <li class="pre-context-line"><code>        @configuration.reporter.report(@world.example_count(example_groups)) do |reporter|
</code></li>
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            hook_context = SuiteHookContext.new
</code></li>
                
                <li class="pre-context-line"><code>            @configuration.hooks.run(:before, :suite, hook_context)
</code></li>
                
              </ol>
              

              <ol start="112" class="context" id="68"
                  onclick="toggle(68);">
                <li class="context-line" id="context-68"><code>            example_groups.map { |g| g.run(reporter) }.all? ? 0 : @configuration.failure_exit_code</code></li>
              </ol>

              
              <ol start="113" class="post-context"
                  id="post-68" onclick="toggle(68);">
                
                <li class="post-context-line"><code>          ensure
</code></li>
                
                <li class="post-context-line"><code>            @configuration.hooks.run(:after, :suite, hook_context)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # @private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;reporter.rb</code> in
                <code><strong>report</strong></code>
            </li>

            <li class="code system">
              
              <ol start="47"
                  class="pre-context" id="pre-69"
                  onclick="toggle(69);">
                
                <li class="pre-context-line"><code>    #     reporter.report(group.examples.size) do |r|
</code></li>
                
                <li class="pre-context-line"><code>    #       example_groups.map {|g| g.run(r) }
</code></li>
                
                <li class="pre-context-line"><code>    #     end
</code></li>
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    def report(expected_example_count)
</code></li>
                
                <li class="pre-context-line"><code>      start(expected_example_count)
</code></li>
                
                <li class="pre-context-line"><code>      begin
</code></li>
                
              </ol>
              

              <ol start="54" class="context" id="69"
                  onclick="toggle(69);">
                <li class="context-line" id="context-69"><code>        yield self</code></li>
              </ol>

              
              <ol start="55" class="post-context"
                  id="post-69" onclick="toggle(69);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        finish
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # @private
</code></li>
                
                <li class="post-context-line"><code>    def start(expected_example_count, time = RSpec::Core::Time.now)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>run_specs</strong></code>
            </li>

            <li class="code system">
              
              <ol start="101"
                  class="pre-context" id="pre-70"
                  onclick="toggle(70);">
                
                <li class="pre-context-line"><code>      # Runs the provided example groups.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      # @param example_groups [Array&lt;RSpec::Core::ExampleGroup&gt;] groups to run
</code></li>
                
                <li class="pre-context-line"><code>      # @return [Fixnum] exit status code. 0 if all specs passed,
</code></li>
                
                <li class="pre-context-line"><code>      #   or the configured failure exit code (1 by default) if specs
</code></li>
                
                <li class="pre-context-line"><code>      #   failed.
</code></li>
                
                <li class="pre-context-line"><code>      def run_specs(example_groups)
</code></li>
                
              </ol>
              

              <ol start="108" class="context" id="70"
                  onclick="toggle(70);">
                <li class="context-line" id="context-70"><code>        @configuration.reporter.report(@world.example_count(example_groups)) do |reporter|</code></li>
              </ol>

              
              <ol start="109" class="post-context"
                  id="post-70" onclick="toggle(70);">
                
                <li class="post-context-line"><code>          begin
</code></li>
                
                <li class="post-context-line"><code>            hook_context = SuiteHookContext.new
</code></li>
                
                <li class="post-context-line"><code>            @configuration.hooks.run(:before, :suite, hook_context)
</code></li>
                
                <li class="post-context-line"><code>            example_groups.map { |g| g.run(reporter) }.all? ? 0 : @configuration.failure_exit_code
</code></li>
                
                <li class="post-context-line"><code>          ensure
</code></li>
                
                <li class="post-context-line"><code>            @configuration.hooks.run(:after, :suite, hook_context)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="79"
                  class="pre-context" id="pre-71"
                  onclick="toggle(71);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # Configures and runs a spec suite.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      # @param err [IO] error stream
</code></li>
                
                <li class="pre-context-line"><code>      # @param out [IO] output stream
</code></li>
                
                <li class="pre-context-line"><code>      def run(err, out)
</code></li>
                
                <li class="pre-context-line"><code>        setup(err, out)
</code></li>
                
              </ol>
              

              <ol start="86" class="context" id="71"
                  onclick="toggle(71);">
                <li class="context-line" id="context-71"><code>        run_specs(@world.ordered_example_groups)</code></li>
              </ol>

              
              <ol start="87" class="post-context"
                  id="post-71" onclick="toggle(71);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Wires together the various configuration objects and state holders.
</code></li>
                
                <li class="post-context-line"><code>      #
</code></li>
                
                <li class="post-context-line"><code>      # @param err [IO] error stream
</code></li>
                
                <li class="post-context-line"><code>      # @param out [IO] output stream
</code></li>
                
                <li class="post-context-line"><code>      def setup(err, out)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="63"
                  class="pre-context" id="pre-72"
                  onclick="toggle(72);">
                
                <li class="pre-context-line"><code>          begin
</code></li>
                
                <li class="pre-context-line"><code>            DRbRunner.new(options).run(err, out)
</code></li>
                
                <li class="pre-context-line"><code>          rescue DRb::DRbConnError
</code></li>
                
                <li class="pre-context-line"><code>            err.puts &quot;No DRb server is running. Running in local process instead ...&quot;
</code></li>
                
                <li class="pre-context-line"><code>            new(options).run(err, out)
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="70" class="context" id="72"
                  onclick="toggle(72);">
                <li class="context-line" id="context-72"><code>          new(options).run(err, out)</code></li>
              </ol>

              
              <ol start="71" class="post-context"
                  id="post-72" onclick="toggle(72);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def initialize(options, configuration=RSpec.configuration, world=RSpec.world)
</code></li>
                
                <li class="post-context-line"><code>        @options       = options
</code></li>
                
                <li class="post-context-line"><code>        @configuration = configuration
</code></li>
                
                <li class="post-context-line"><code>        @world         = world
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;lib&#x2F;rspec&#x2F;core&#x2F;runner.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code system">
              
              <ol start="31"
                  class="pre-context" id="pre-73"
                  onclick="toggle(73);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>        @installed_at_exit = true
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # Runs the suite of specs and exits the process with an appropriate exit code.
</code></li>
                
                <li class="pre-context-line"><code>      def self.invoke
</code></li>
                
                <li class="pre-context-line"><code>        disable_autorun!
</code></li>
                
              </ol>
              

              <ol start="38" class="context" id="73"
                  onclick="toggle(73);">
                <li class="context-line" id="context-73"><code>        status = run(ARGV, $stderr, $stdout).to_i</code></li>
              </ol>

              
              <ol start="39" class="post-context"
                  id="post-73" onclick="toggle(73);">
                
                <li class="post-context-line"><code>        exit(status) if status != 0
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run a suite of RSpec examples. Does not exit.
</code></li>
                
                <li class="post-context-line"><code>      #
</code></li>
                
                <li class="post-context-line"><code>      # This is used internally by RSpec to run a suite, but is available
</code></li>
                
                <li class="post-context-line"><code>      # for use by any other automation tool.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.0.0&#x2F;gems&#x2F;rspec-core-3.0.2&#x2F;exe&#x2F;rspec</code> in
                <code><strong>&lt;top (required)&gt;</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1"
                  class="pre-context" id="pre-74"
                  onclick="toggle(74);">
                
                <li class="pre-context-line"><code>#!&#x2F;usr&#x2F;bin&#x2F;env ruby
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>require &#x27;rspec&#x2F;core&#x27;
</code></li>
                
              </ol>
              

              <ol start="4" class="context" id="74"
                  onclick="toggle(74);">
                <li class="context-line" id="context-74"><code>RSpec::Core::Runner.invoke</code></li>
              </ol>

              
              <ol start="5" class="post-context"
                  id="post-74" onclick="toggle(74);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;usr&#x2F;bin&#x2F;rspec</code> in
                <code><strong>load</strong></code>
            </li>

            <li class="code system">
              
              <ol start="16"
                  class="pre-context" id="pre-75"
                  onclick="toggle(75);">
                
                <li class="pre-context-line"><code>  if str =~ &#x2F;\A_(.*)_\z&#x2F;
</code></li>
                
                <li class="pre-context-line"><code>    version = $1
</code></li>
                
                <li class="pre-context-line"><code>    ARGV.shift
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>gem &#x27;rspec-core&#x27;, version
</code></li>
                
              </ol>
              

              <ol start="23" class="context" id="75"
                  onclick="toggle(75);">
                <li class="context-line" id="context-75"><code>load Gem.bin_path(&#x27;rspec-core&#x27;, &#x27;rspec&#x27;, version)</code></li>
              </ol>

              
              <ol start="24" class="post-context"
                  id="post-75" onclick="toggle(75);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;usr&#x2F;bin&#x2F;rspec</code> in
                <code><strong>&lt;main&gt;</strong></code>
            </li>

            <li class="code system">
              
              <ol start="16"
                  class="pre-context" id="pre-76"
                  onclick="toggle(76);">
                
                <li class="pre-context-line"><code>  if str =~ &#x2F;\A_(.*)_\z&#x2F;
</code></li>
                
                <li class="pre-context-line"><code>    version = $1
</code></li>
                
                <li class="pre-context-line"><code>    ARGV.shift
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>gem &#x27;rspec-core&#x27;, version
</code></li>
                
              </ol>
              

              <ol start="23" class="context" id="76"
                  onclick="toggle(76);">
                <li class="context-line" id="context-76"><code>load Gem.bin_path(&#x27;rspec-core&#x27;, &#x27;rspec&#x27;, version)</code></li>
              </ol>

              
              <ol start="24" class="post-context"
                  id="post-76" onclick="toggle(76);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      

      </ul>
    </div> <!-- /BACKTRACE -->

    <div id="get">
      <h3 id="get-info">GET</h3>
      
        <p class="no-data">No GET data.</p>
      
      <div class="clear"></div>
    </div> <!-- /GET -->

    <div id="post">
      <h3 id="post-info">POST</h3>
      
        <p class="no-data">No POST data.</p>
      
      <div class="clear"></div>
    </div> <!-- /POST -->

    <div id="cookies">
      <h3 id="cookie-info">COOKIES</h3>
      
        <p class="no-data">No cookie data.</p>
      
      <div class="clear"></div>
    </div> <!-- /COOKIES -->

    <div id="rack">
      <h3 id="env-info">Rack ENV</h3>
      <table class="req">
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
         
         <tr>
           <td>CONTENT_LENGTH</td>
           <td class="code"><div>0</div></td>
         </tr>
         
         <tr>
           <td>HTTPS</td>
           <td class="code"><div>off</div></td>
         </tr>
         
         <tr>
           <td>PATH_INFO</td>
           <td class="code"><div>&#x2F;</div></td>
         </tr>
         
         <tr>
           <td>QUERY_STRING</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>REQUEST_METHOD</td>
           <td class="code"><div>GET</div></td>
         </tr>
         
         <tr>
           <td>SCRIPT_NAME</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>SERVER_NAME</td>
           <td class="code"><div>example.org</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PORT</td>
           <td class="code"><div>80</div></td>
         </tr>
         
         <tr>
           <td>rack.errors</td>
           <td class="code"><div>#&lt;Object:0x007f80abafe898&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.input</td>
           <td class="code"><div>#&lt;StringIO:0x007f80acc5ca90&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.logger</td>
           <td class="code"><div>#&lt;Logger:0x007f80ab9b02c0 @progname=nil, @level=1, @default_formatter=#&lt;Logger::Formatter:0x007f80ab9b0298 @datetime_format=nil&gt;, @formatter=nil, @logdev=#&lt;Logger::LogDevice:0x007f80ab9b01f8 @shift_size=nil, @shift_age=nil, @filename=nil, @dev=#&lt;StringIO:0x007f80acc5cb30&gt;, @mutex=#&lt;Logger::LogDevice::LogDeviceMutex:0x007f80ab9b0040 @mon_owner=nil, @mon_count=0, @mon_mutex=#&lt;Mutex:0x007f80ab9bbc38&gt;&gt;&gt;&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.multiprocess</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.multithread</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.request.cookie_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_string</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>rack.run_once</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.url_scheme</td>
           <td class="code"><div>http</div></td>
         </tr>
         
         <tr>
           <td>rack.version</td>
           <td class="code"><div>[1, 2]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.accept</td>
           <td class="code"><div>[#&lt;Sinatra::Request::AcceptEntry:0x007f80aba06e40 @entry=&quot;*&#x2F;*&quot;, @type=&quot;*&#x2F;*&quot;, @params={}, @q=1.0&gt;]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.commonlogger</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>sinatra.error</td>
           <td class="code"><div>#&lt;Errno::ENOENT: No such file or directory - &#x2F;Users&#x2F;csun&#x2F;RubymineProjects&#x2F;hotelsystem&#x2F;spec&#x2F;views&#x2F;index.erb&gt;</div></td>
         </tr>
         
         <tr>
           <td>sinatra.route</td>
           <td class="code"><div>GET &#x2F;</div></td>
         </tr>
         
      </table>
      <div class="clear"></div>
    </div> <!-- /RACK ENV -->

    <p id="explanation">You're seeing this error because you have
enabled the <code>show_exceptions</code> setting.</p>
  </div> <!-- /WRAP -->
  </body>
</html>
..

1 deprecation warning total

Finished in 0.11567 seconds (files took 0.38708 seconds to load)
2 examples, 0 failures
